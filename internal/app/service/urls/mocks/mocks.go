// Code generated by MockGen. DO NOT EDIT.
// Source: urls.go

// Package mock_urls is a generated GoMock package.
package mock_urls

import (
	reflect "reflect"

	models "github.com/ChristinaFomenko/shortener/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockurlRepository is a mock of urlRepository interface.
type MockurlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockurlRepositoryMockRecorder
}

// MockurlRepositoryMockRecorder is the mock recorder for MockurlRepository.
type MockurlRepositoryMockRecorder struct {
	mock *MockurlRepository
}

// NewMockurlRepository creates a new mock instance.
func NewMockurlRepository(ctrl *gomock.Controller) *MockurlRepository {
	mock := &MockurlRepository{ctrl: ctrl}
	mock.recorder = &MockurlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockurlRepository) EXPECT() *MockurlRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockurlRepository) Add(urlID, userID, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", urlID, userID, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockurlRepositoryMockRecorder) Add(urlID, userID, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockurlRepository)(nil).Add), urlID, userID, url)
}

// Get mocks base method.
func (m *MockurlRepository) Get(urlID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", urlID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockurlRepositoryMockRecorder) Get(urlID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockurlRepository)(nil).Get), urlID)
}

// GetList mocks base method.
func (m *MockurlRepository) GetList(userID string) ([]models.UserURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", userID)
	ret0, _ := ret[0].([]models.UserURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockurlRepositoryMockRecorder) GetList(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockurlRepository)(nil).GetList), userID)
}

// Ping mocks base method.
func (m *MockurlRepository) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockurlRepositoryMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockurlRepository)(nil).Ping))
}

// Mockgenerator is a mock of generator interface.
type Mockgenerator struct {
	ctrl     *gomock.Controller
	recorder *MockgeneratorMockRecorder
}

// MockgeneratorMockRecorder is the mock recorder for Mockgenerator.
type MockgeneratorMockRecorder struct {
	mock *Mockgenerator
}

// NewMockgenerator creates a new mock instance.
func NewMockgenerator(ctrl *gomock.Controller) *Mockgenerator {
	mock := &Mockgenerator{ctrl: ctrl}
	mock.recorder = &MockgeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockgenerator) EXPECT() *MockgeneratorMockRecorder {
	return m.recorder
}

// Letters mocks base method.
func (m *Mockgenerator) Letters(n int64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Letters", n)
	ret0, _ := ret[0].(string)
	return ret0
}

// Letters indicates an expected call of Letters.
func (mr *MockgeneratorMockRecorder) Letters(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Letters", reflect.TypeOf((*Mockgenerator)(nil).Letters), n)
}
